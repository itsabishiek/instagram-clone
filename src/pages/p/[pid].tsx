import {
  Avatar,
  Box,
  Flex,
  Image,
  InputGroup,
  InputRightAddon,
  Skeleton,
  Stack,
  Text,
  Textarea,
} from "@chakra-ui/react";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useState } from "react";
import { useRecoilState, useRecoilValue } from "recoil";
import { Post } from "../../atoms/postsAtom";
import { userDataState } from "../../atoms/userDataAtom";
import PostLoader from "../../components/loader/PostLoader";
import MobilePostDetail from "../../components/post/MobilePostDetail";
import PostDetailItem from "../../components/post/PostDetailItem";
import { firestore } from "../../firebase/clientApp";
import usePosts, { Comment } from "../../hooks/usePosts";

type PostPageProps = {};

const PostPage: React.FC<PostPageProps> = () => {
  const [loading, setLoading] = useState(false);
  const [commentLoading, setCommentLoading] = useState(false);
  const {
    postStateValue,
    setPostStateValue,
    onDeletePost,
    likePost,
    onCreateComment,
    commentText,
    setCommentText,
    commenting,
    comments,
    setComments,
    onDeleteComment,
    deleting,
  } = usePosts();
  const post = postStateValue.selectedPost;
  const router = useRouter();
  const { pid } = router.query;

  console.log(post?.id);

  const fetchPost = async (postId: string) => {
    setLoading(true);
    try {
      const postDocRef = doc(firestore, "posts", postId);
      const postDoc = await getDoc(postDocRef);
      setPostStateValue((prev) => ({
        ...prev,
        selectedPost: { id: postDoc.id, ...postDoc.data() } as Post,
      }));
    } catch (error) {
      console.log("fetchPost Error", error);
    }
    setLoading(false);
  };

  const getPostComments = async (postId: string) => {
    setCommentLoading(true);
    try {
      const commentsQuery = query(
        collection(firestore, "posts", `${postId}/comments`),
        where("postId", "==", postId),
        orderBy("createdAt", "desc")
      );
      const commentDocs = await getDocs(commentsQuery);
      const comments = commentDocs.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setComments(comments as Comment[]);
    } catch (error) {
      console.log("getPostComments Error", error);
    }
    setCommentLoading(false);
  };

  useEffect(() => {
    if (pid && !postStateValue.selectedPost) {
      fetchPost(pid as string);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pid, postStateValue.selectedPost]);

  useEffect(() => {
    getPostComments(pid as string);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pid]);

  return (
    <>
      <Head>
        <title>
          {post?.name === undefined ? "" : post.name} on Instagram:{" "}
          {`"${post?.caption === null ? "" : post?.caption}"`}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Instagram_icon.png/2048px-Instagram_icon.png"
        />
      </Head>

      <>
        {post && (
          <>
            <Flex
              justify="center"
              p={{ base: "0px 0px 16px 0px ", md: "30px 0px" }}
              display={{ base: "none", md: "flex" }}
            >
              <Flex
                flexDir={{ base: "column", md: "row" }}
                justify="center"
                w="100%"
                maxWidth="935px"
              >
                {loading && <Skeleton w="60%" h="350px" />}
                <Box
                  w={{ base: "100%", md: "60%" }}
                  display={loading ? "none" : "flex"}
                  alignItems="center"
                  justifyContent="center"
                  bg="white"
                  border={{ base: "none", md: "1px solid" }}
                  borderColor={{ base: "none", md: "gray.200" }}
                >
                  <Image
                    src={post.imageURL}
                    alt=""
                    maxH="440px"
                    h="100%"
                    objectFit="contain"
                  />
                </Box>

                <Box w={{ base: "100%", md: "40%" }}>
                  <PostDetailItem
                    post={post}
                    onDeletePost={onDeletePost}
                    likePost={likePost}
                    commentText={commentText}
                    setCommentText={setCommentText}
                    onCreateComment={onCreateComment}
                    comments={comments}
                    loading={commenting}
                    commentLoading={commentLoading}
                    onDeleteComment={onDeleteComment}
                    deleting={deleting}
                  />
                </Box>
              </Flex>
            </Flex>

            <MobilePostDetail
              post={post}
              commentText={commentText}
              setCommentText={setCommentText}
              onCreateComment={onCreateComment}
              comments={comments}
              loading={commenting}
              commentLoading={commentLoading}
              onDeleteComment={onDeleteComment}
              deleting={deleting}
            />
          </>
        )}
      </>
    </>
  );
};
export default PostPage;
